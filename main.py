"""
API de VÃ©rification de Documents FranÃ§ais
==========================================
API professionnelle pour valider SIRET, SIREN, TVA intracommunautaire et IBAN franÃ§ais
Auteur: DocVerify France
Version: 1.0.0
"""

from fastapi import FastAPI, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any
import uvicorn
from datetime import datetime
import hashlib
import os

from validators import (
    validate_siret,
    validate_siren,
    validate_tva_intracommunautaire,
    validate_iban_fr,
    get_company_info_from_sirene,
    check_tva_vies
)

# Configuration
API_VERSION = "1.0.0"
API_TITLE = "API VÃ©rification Documents France"
API_DESCRIPTION = """
## ðŸ‡«ðŸ‡· API de VÃ©rification de Documents FranÃ§ais

Cette API vous permet de vÃ©rifier en temps rÃ©el la validitÃ© de documents officiels franÃ§ais :

### FonctionnalitÃ©s

* **SIRET/SIREN** : Validation + rÃ©cupÃ©ration des donnÃ©es entreprise (INSEE)
* **TVA Intracommunautaire** : Validation France + EU (VIES)
* **IBAN FranÃ§ais** : Validation format + clÃ© de contrÃ´le

### Avantages

âœ… Sources officielles (INSEE, VIES)  
âœ… Temps rÃ©el  
âœ… Documentation complÃ¨te  
âœ… Rate limiting intÃ©grÃ©  

### Cas d'usage

- Auto-complÃ©tion de formulaires
- VÃ©rification KYC/KYB
- PrÃ©vention fraude
- Enrichissement de donnÃ©es
"""

# Initialiser l'app FastAPI
app = FastAPI(
    title=API_TITLE,
    description=API_DESCRIPTION,
    version=API_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    contact={
        "name": "Support DocVerify",
        "email": "support@docverify.fr"
    }
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ModÃ¨les de donnÃ©es
class SIRETRequest(BaseModel):
    siret: str = Field(..., description="NumÃ©ro SIRET Ã  14 chiffres", example="12345678901234")
    include_company_data: bool = Field(default=True, description="Inclure les donnÃ©es de l'entreprise")

class SIRENRequest(BaseModel):
    siren: str = Field(..., description="NumÃ©ro SIREN Ã  9 chiffres", example="123456789")
    include_company_data: bool = Field(default=True, description="Inclure les donnÃ©es de l'entreprise")

class TVARequest(BaseModel):
    numero_tva: str = Field(..., description="NumÃ©ro TVA (ex: FR12345678901)", example="FR12345678901")
    verify_vies: bool = Field(default=True, description="VÃ©rifier avec VIES")

class IBANRequest(BaseModel):
    iban: str = Field(..., description="IBAN franÃ§ais (27 caractÃ¨res)", example="FR7612345678901234567890123")

class APIResponse(BaseModel):
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    timestamp: str

# SystÃ¨me d'authentification simple (Ã  amÃ©liorer en production)
API_KEYS = {
    "demo_key_123": {"name": "Demo User", "tier": "free", "daily_limit": 100},
    "premium_key_456": {"name": "Premium User", "tier": "premium", "daily_limit": 10000}
}

def verify_api_key(x_api_key: str = Header(...)):
    """VÃ©rifie la clÃ© API"""
    if x_api_key not in API_KEYS:
        raise HTTPException(status_code=403, detail="ClÃ© API invalide")
    return API_KEYS[x_api_key]

# Routes

@app.get("/")
async def root():
    """Page d'accueil de l'API"""
    return {
        "message": "Bienvenue sur l'API de VÃ©rification de Documents FranÃ§ais",
        "version": API_VERSION,
        "documentation": "/docs",
        "endpoints": {
            "siret": "/api/v1/verify/siret",
            "siren": "/api/v1/verify/siren",
            "tva": "/api/v1/verify/tva",
            "iban": "/api/v1/verify/iban"
        }
    }

@app.get("/health")
async def health_check():
    """Health check de l'API"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# ============ ENDPOINTS DE VÃ‰RIFICATION ============

@app.post("/api/v1/verify/siret", response_model=APIResponse)
async def verify_siret_endpoint(
    request: SIRETRequest,
    user: dict = Depends(verify_api_key)
):
    """
    VÃ©rifie un numÃ©ro SIRET
    
    Le SIRET (SystÃ¨me d'Identification du RÃ©pertoire des Ã‰tablissements) est un code
    de 14 chiffres qui identifie gÃ©ographiquement l'Ã©tablissement d'une entreprise.
    
    **Retourne:**
    - ValiditÃ© du format
    - DonnÃ©es de l'entreprise (si demandÃ©)
    - Statut de l'Ã©tablissement
    """
    try:
        # Validation format
        is_valid, error_msg = validate_siret(request.siret)
        
        if not is_valid:
            return APIResponse(
                success=False,
                error=error_msg,
                timestamp=datetime.now().isoformat()
            )
        
        response_data = {
            "siret": request.siret,
            "format_valid": True
        }
        
        # RÃ©cupÃ©rer les donnÃ©es entreprise si demandÃ©
        if request.include_company_data:
            company_data = get_company_info_from_sirene(request.siret, "siret")
            if company_data:
                response_data["company"] = company_data
        
        return APIResponse(
            success=True,
            data=response_data,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/verify/siren", response_model=APIResponse)
async def verify_siren_endpoint(
    request: SIRENRequest,
    user: dict = Depends(verify_api_key)
):
    """
    VÃ©rifie un numÃ©ro SIREN
    
    Le SIREN (SystÃ¨me d'Identification du RÃ©pertoire des Entreprises) est un code
    de 9 chiffres qui identifie une entreprise franÃ§aise.
    
    **Retourne:**
    - ValiditÃ© du format
    - DonnÃ©es de l'entreprise (si demandÃ©)
    - Liste des Ã©tablissements
    """
    try:
        # Validation format
        is_valid, error_msg = validate_siren(request.siren)
        
        if not is_valid:
            return APIResponse(
                success=False,
                error=error_msg,
                timestamp=datetime.now().isoformat()
            )
        
        response_data = {
            "siren": request.siren,
            "format_valid": True
        }
        
        # RÃ©cupÃ©rer les donnÃ©es entreprise si demandÃ©
        if request.include_company_data:
            company_data = get_company_info_from_sirene(request.siren, "siren")
            if company_data:
                response_data["company"] = company_data
        
        return APIResponse(
            success=True,
            data=response_data,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/verify/tva", response_model=APIResponse)
async def verify_tva_endpoint(
    request: TVARequest,
    user: dict = Depends(verify_api_key)
):
    """
    VÃ©rifie un numÃ©ro de TVA intracommunautaire
    
    Valide le format et vÃ©rifie l'existence du numÃ©ro auprÃ¨s du systÃ¨me VIES
    de la Commission EuropÃ©enne.
    
    **Retourne:**
    - ValiditÃ© du format
    - Statut VIES (si demandÃ©)
    - Informations entreprise associÃ©e
    """
    try:
        # Validation format
        is_valid, country, error_msg = validate_tva_intracommunautaire(request.numero_tva)
        
        if not is_valid:
            return APIResponse(
                success=False,
                error=error_msg,
                timestamp=datetime.now().isoformat()
            )
        
        response_data = {
            "numero_tva": request.numero_tva.upper(),
            "format_valid": True,
            "country_code": country
        }
        
        # VÃ©rification VIES si demandÃ©
        if request.verify_vies:
            vies_result = check_tva_vies(request.numero_tva)
            response_data["vies"] = vies_result
        
        return APIResponse(
            success=True,
            data=response_data,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/verify/iban", response_model=APIResponse)
async def verify_iban_endpoint(
    request: IBANRequest,
    user: dict = Depends(verify_api_key)
):
    """
    VÃ©rifie un IBAN franÃ§ais
    
    Valide le format, la clÃ© de contrÃ´le et les codes bancaires selon
    les standards franÃ§ais (27 caractÃ¨res).
    
    **Retourne:**
    - ValiditÃ© du format
    - ValiditÃ© de la clÃ© de contrÃ´le
    - DÃ©tails du compte (code banque, guichet, compte, clÃ©)
    """
    try:
        # Validation IBAN
        is_valid, details, error_msg = validate_iban_fr(request.iban)
        
        if not is_valid:
            return APIResponse(
                success=False,
                error=error_msg,
                timestamp=datetime.now().isoformat()
            )
        
        return APIResponse(
            success=True,
            data=details,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ============ ENDPOINT BATCH (Premium) ============

@app.post("/api/v1/verify/batch")
async def verify_batch_endpoint(
    requests: list,
    user: dict = Depends(verify_api_key)
):
    """
    VÃ©rification en lot (rÃ©servÃ© aux utilisateurs Premium)
    
    Permet de vÃ©rifier plusieurs documents en une seule requÃªte.
    Maximum 100 documents par batch.
    """
    if user["tier"] != "premium":
        raise HTTPException(
            status_code=403,
            detail="FonctionnalitÃ© rÃ©servÃ©e aux utilisateurs Premium"
        )
    
    if len(requests) > 100:
        raise HTTPException(
            status_code=400,
            detail="Maximum 100 documents par batch"
        )
    
    results = []
    for req in requests:
        # Traiter chaque requÃªte...
        pass
    
    return {
        "success": True,
        "results": results,
        "total": len(results)
    }

# ============ STATISTIQUES ============

@app.get("/api/v1/stats")
async def get_stats(user: dict = Depends(verify_api_key)):
    """Statistiques d'utilisation de l'utilisateur"""
    return {
        "user": user["name"],
        "tier": user["tier"],
        "daily_limit": user["daily_limit"],
        "used_today": 0,  # Ã€ implÃ©menter avec une vraie DB
        "remaining": user["daily_limit"]
    }

if __name__ == "__main__":
    # RÃ©cupÃ©rer le port depuis la variable d'environnement (Render le fournit)
    port = int(os.getenv("PORT", 8000))
    # En production, dÃ©sactiver le reload
    reload = os.getenv("RELOAD", "false").lower() == "true"
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=reload
    )
